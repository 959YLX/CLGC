// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cs_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cs_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cs_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cs_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cs_5fcommon_2eproto;
namespace csproto {
class ClientRequest;
class ClientRequestDefaultTypeInternal;
extern ClientRequestDefaultTypeInternal _ClientRequest_default_instance_;
class ServerResponse;
class ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
}  // namespace csproto
PROTOBUF_NAMESPACE_OPEN
template<> ::csproto::ClientRequest* Arena::CreateMaybeMessage<::csproto::ClientRequest>(Arena*);
template<> ::csproto::ServerResponse* Arena::CreateMaybeMessage<::csproto::ServerResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace csproto {

// ===================================================================

class ClientRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:csproto.ClientRequest) */ {
 public:
  inline ClientRequest() : ClientRequest(nullptr) {};
  virtual ~ClientRequest();

  ClientRequest(const ClientRequest& from);
  ClientRequest(ClientRequest&& from) noexcept
    : ClientRequest() {
    *this = ::std::move(from);
  }

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRequest& operator=(ClientRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientRequest* internal_default_instance() {
    return reinterpret_cast<const ClientRequest*>(
               &_ClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientRequest& a, ClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientRequest* New() const final {
    return CreateMaybeMessage<ClientRequest>(nullptr);
  }

  ClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientRequest& from);
  void MergeFrom(const ClientRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "csproto.ClientRequest";
  }
  protected:
  explicit ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_5fcommon_2eproto);
    return ::descriptor_table_cs_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 100,
    kClientVersionFieldNumber = 1,
  };
  // .google.protobuf.Any msg = 100;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const PROTOBUF_NAMESPACE_ID::Any& msg() const;
  PROTOBUF_NAMESPACE_ID::Any* release_msg();
  PROTOBUF_NAMESPACE_ID::Any* mutable_msg();
  void set_allocated_msg(PROTOBUF_NAMESPACE_ID::Any* msg);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_msg() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      PROTOBUF_NAMESPACE_ID::Any* msg);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_msg();

  // int32 client_version = 1;
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::int32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:csproto.ClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cs_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ServerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:csproto.ServerResponse) */ {
 public:
  inline ServerResponse() : ServerResponse(nullptr) {};
  virtual ~ServerResponse();

  ServerResponse(const ServerResponse& from);
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerResponse& default_instance();

  enum DataCase {
    kSuccessData = 100,
    kErrorData = 101,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerResponse* New() const final {
    return CreateMaybeMessage<ServerResponse>(nullptr);
  }

  ServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "csproto.ServerResponse";
  }
  protected:
  explicit ServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_5fcommon_2eproto);
    return ::descriptor_table_cs_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
    kSuccessDataFieldNumber = 100,
    kErrorDataFieldNumber = 101,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .google.protobuf.Any success_data = 100;
  bool has_success_data() const;
  private:
  bool _internal_has_success_data() const;
  public:
  void clear_success_data();
  const PROTOBUF_NAMESPACE_ID::Any& success_data() const;
  PROTOBUF_NAMESPACE_ID::Any* release_success_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_success_data();
  void set_allocated_success_data(PROTOBUF_NAMESPACE_ID::Any* success_data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_success_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_success_data();
  public:
  void unsafe_arena_set_allocated_success_data(
      PROTOBUF_NAMESPACE_ID::Any* success_data);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_success_data();

  // .google.protobuf.Any error_data = 101;
  bool has_error_data() const;
  private:
  bool _internal_has_error_data() const;
  public:
  void clear_error_data();
  const PROTOBUF_NAMESPACE_ID::Any& error_data() const;
  PROTOBUF_NAMESPACE_ID::Any* release_error_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_error_data();
  void set_allocated_error_data(PROTOBUF_NAMESPACE_ID::Any* error_data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_error_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_error_data();
  public:
  void unsafe_arena_set_allocated_error_data(
      PROTOBUF_NAMESPACE_ID::Any* error_data);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_error_data();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:csproto.ServerResponse)
 private:
  class _Internal;
  void set_has_success_data();
  void set_has_error_data();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  union DataUnion {
    DataUnion() {}
    PROTOBUF_NAMESPACE_ID::Any* success_data_;
    PROTOBUF_NAMESPACE_ID::Any* error_data_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_cs_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientRequest

// int32 client_version = 1;
inline void ClientRequest::clear_client_version() {
  client_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientRequest::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientRequest::client_version() const {
  // @@protoc_insertion_point(field_get:csproto.ClientRequest.client_version)
  return _internal_client_version();
}
inline void ClientRequest::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_version_ = value;
}
inline void ClientRequest::set_client_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:csproto.ClientRequest.client_version)
}

// .google.protobuf.Any msg = 100;
inline bool ClientRequest::_internal_has_msg() const {
  return this != internal_default_instance() && msg_ != nullptr;
}
inline bool ClientRequest::has_msg() const {
  return _internal_has_msg();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ClientRequest::_internal_msg() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = msg_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ClientRequest::msg() const {
  // @@protoc_insertion_point(field_get:csproto.ClientRequest.msg)
  return _internal_msg();
}
inline void ClientRequest::unsafe_arena_set_allocated_msg(
    PROTOBUF_NAMESPACE_ID::Any* msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_);
  }
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:csproto.ClientRequest.msg)
}
inline PROTOBUF_NAMESPACE_ID::Any* ClientRequest::release_msg() {
  auto temp = unsafe_arena_release_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ClientRequest::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:csproto.ClientRequest.msg)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = msg_;
  msg_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ClientRequest::_internal_mutable_msg() {
  
  if (msg_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    msg_ = p;
  }
  return msg_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ClientRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:csproto.ClientRequest.msg)
  return _internal_mutable_msg();
}
inline void ClientRequest::set_allocated_msg(PROTOBUF_NAMESPACE_ID::Any* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_);
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg)->GetArena();
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:csproto.ClientRequest.msg)
}

// -------------------------------------------------------------------

// ServerResponse

// int32 code = 1;
inline void ServerResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResponse::code() const {
  // @@protoc_insertion_point(field_get:csproto.ServerResponse.code)
  return _internal_code();
}
inline void ServerResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void ServerResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:csproto.ServerResponse.code)
}

// string msg = 2;
inline void ServerResponse::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerResponse::msg() const {
  // @@protoc_insertion_point(field_get:csproto.ServerResponse.msg)
  return _internal_msg();
}
inline void ServerResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:csproto.ServerResponse.msg)
}
inline std::string* ServerResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:csproto.ServerResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& ServerResponse::_internal_msg() const {
  return msg_.Get();
}
inline void ServerResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerResponse::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:csproto.ServerResponse.msg)
}
inline void ServerResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:csproto.ServerResponse.msg)
}
inline void ServerResponse::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:csproto.ServerResponse.msg)
}
inline std::string* ServerResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerResponse::release_msg() {
  // @@protoc_insertion_point(field_release:csproto.ServerResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:csproto.ServerResponse.msg)
}
inline std::string* ServerResponse::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:csproto.ServerResponse.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServerResponse::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:csproto.ServerResponse.msg)
}

// .google.protobuf.Any success_data = 100;
inline bool ServerResponse::_internal_has_success_data() const {
  return data_case() == kSuccessData;
}
inline bool ServerResponse::has_success_data() const {
  return _internal_has_success_data();
}
inline void ServerResponse::set_has_success_data() {
  _oneof_case_[0] = kSuccessData;
}
inline PROTOBUF_NAMESPACE_ID::Any* ServerResponse::release_success_data() {
  // @@protoc_insertion_point(field_release:csproto.ServerResponse.success_data)
  if (_internal_has_success_data()) {
    clear_has_data();
      PROTOBUF_NAMESPACE_ID::Any* temp = data_.success_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.success_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Any& ServerResponse::_internal_success_data() const {
  return _internal_has_success_data()
      ? *data_.success_data_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Any*>(&PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ServerResponse::success_data() const {
  // @@protoc_insertion_point(field_get:csproto.ServerResponse.success_data)
  return _internal_success_data();
}
inline PROTOBUF_NAMESPACE_ID::Any* ServerResponse::unsafe_arena_release_success_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:csproto.ServerResponse.success_data)
  if (_internal_has_success_data()) {
    clear_has_data();
    PROTOBUF_NAMESPACE_ID::Any* temp = data_.success_data_;
    data_.success_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerResponse::unsafe_arena_set_allocated_success_data(PROTOBUF_NAMESPACE_ID::Any* success_data) {
  clear_data();
  if (success_data) {
    set_has_success_data();
    data_.success_data_ = success_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:csproto.ServerResponse.success_data)
}
inline PROTOBUF_NAMESPACE_ID::Any* ServerResponse::_internal_mutable_success_data() {
  if (!_internal_has_success_data()) {
    clear_data();
    set_has_success_data();
    data_.success_data_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Any >(GetArena());
  }
  return data_.success_data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ServerResponse::mutable_success_data() {
  // @@protoc_insertion_point(field_mutable:csproto.ServerResponse.success_data)
  return _internal_mutable_success_data();
}

// .google.protobuf.Any error_data = 101;
inline bool ServerResponse::_internal_has_error_data() const {
  return data_case() == kErrorData;
}
inline bool ServerResponse::has_error_data() const {
  return _internal_has_error_data();
}
inline void ServerResponse::set_has_error_data() {
  _oneof_case_[0] = kErrorData;
}
inline PROTOBUF_NAMESPACE_ID::Any* ServerResponse::release_error_data() {
  // @@protoc_insertion_point(field_release:csproto.ServerResponse.error_data)
  if (_internal_has_error_data()) {
    clear_has_data();
      PROTOBUF_NAMESPACE_ID::Any* temp = data_.error_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.error_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Any& ServerResponse::_internal_error_data() const {
  return _internal_has_error_data()
      ? *data_.error_data_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Any*>(&PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ServerResponse::error_data() const {
  // @@protoc_insertion_point(field_get:csproto.ServerResponse.error_data)
  return _internal_error_data();
}
inline PROTOBUF_NAMESPACE_ID::Any* ServerResponse::unsafe_arena_release_error_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:csproto.ServerResponse.error_data)
  if (_internal_has_error_data()) {
    clear_has_data();
    PROTOBUF_NAMESPACE_ID::Any* temp = data_.error_data_;
    data_.error_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerResponse::unsafe_arena_set_allocated_error_data(PROTOBUF_NAMESPACE_ID::Any* error_data) {
  clear_data();
  if (error_data) {
    set_has_error_data();
    data_.error_data_ = error_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:csproto.ServerResponse.error_data)
}
inline PROTOBUF_NAMESPACE_ID::Any* ServerResponse::_internal_mutable_error_data() {
  if (!_internal_has_error_data()) {
    clear_data();
    set_has_error_data();
    data_.error_data_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Any >(GetArena());
  }
  return data_.error_data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ServerResponse::mutable_error_data() {
  // @@protoc_insertion_point(field_mutable:csproto.ServerResponse.error_data)
  return _internal_mutable_error_data();
}

inline bool ServerResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ServerResponse::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ServerResponse::DataCase ServerResponse::data_case() const {
  return ServerResponse::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace csproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cs_5fcommon_2eproto
